{"name":"Pails","tagline":"The lightest, most powerful, PHP MVC framework for rapid application development.","body":"Pails\r\n=====\r\n\r\nPails is a seriously lightweight MVC framework written in PHP. The overarching\r\nvision is that less code is more powerful (and certainly gives rise to fewer\r\nbugs). [Read more on my blog][blog]\r\n\r\nPails is licensed under the [GPLv3][gplv3]. If the GPL doesn't work for you,\r\nlet's talk about your use case. If you need verification that this is free\r\nsoftware (for your boss, CTO, etc.), that can also be arranged.\r\n\r\nCome talk about pails in #pails on Freenode.\r\n\r\nBuilding a site with pails\r\n--------------------------\r\n\r\nYou can build a pails app using some automated scripts OR manually. Using scripts\r\nis probably faster.\r\n\r\nFirst, install pails:\r\n\r\n```sh\r\ngit clone https://github.com/bparks/pails.git\r\ncd pails && make install        # Note: if you don't have permissions to\r\n                                # /usr/local/**/, you'll need to precede\r\n                                # the installation command with 'sudo'\r\n```\r\n\r\nThen, run the pails command to build out a new tree for you:\r\n\r\n```sh\r\npails new my_pails_app    # Creates a new app\r\ncd my_pails_app\r\npails server    # Runs the PHP development server (requires PHP 5.4+)\r\n```\r\n\r\nBuild an app!\r\n-------------\r\n\r\nModels go in /models and extend ActiveRecord\\Model. If you're using models, you'll\r\nneed the pails activerecord plugin:\r\n\r\n```sh\r\npails install activerecord\r\n```\r\n\r\nControllers go in /controllers with names like StuffController (case matters)\r\nand extend Pails\\Controller.\r\n\r\nViews go in /views, in subfolders named by controller (all lowercase). Thus, a\r\nview for the 'index' action of StuffController would be views/stuff/index.php.\r\n\r\nEach *public* method in a Controller class is a valid action.\r\n\r\nPlugins\r\n-------\r\n\r\nWe've been using Pails over at [Synapse Software][synapse] for almost a year now,\r\nso we have a wealth of additional functionality we're packaging up as plugins. You\r\ntoo can build plugins and contribute them. Use this [test plugin][test_plugin] as\r\nan example. If you want your plugin to be listed in the directory, submit a pull\r\nrequest against the [pails-plugins][pails-plugins] repository.\r\n\r\nBefore and after actions\r\n------------------------\r\n\r\nJust like Rails, pails has before and after actions. Right now, they need to be\r\npublic methods, which are configured as before or after actions with a class-level\r\nvariable called `$before_actions` or `$after_actions`, like so:\r\n\r\n```php\r\n$before_actions = array('require_login', 'require_admin');\r\n```\r\n\r\nThe referenced functions can't take any arguments.\r\n\r\nYou can also exclude them from beign applicable to certain actions by making this\r\narray associative,  like so:\r\n\r\n```php\r\n$before_actions = array(\r\n    'require_login',\r\n    'require_admin' => array('except' => array('index'))\r\n);\r\n```\r\n\r\nBE WARNED that in a future release, the way to do this properly will be to fiddle\r\nwith these variables (or preferably to call a method by the same name, which doesn't\r\nexist yet) inside the class's `__construct()` function. This eleminates the problem\r\ncaused by inheritance of subclasses clobbering before and after actions that are set\r\nby superclasses.\r\n\r\nQuestions?\r\n----------\r\n\r\nSend email to bparks@synapsesoftware.com.\r\n\r\n[blog]: http://bparks.github.io/\r\n[gplv3]: http://www.gnu.org/licenses/gpl-3.0.html\r\n[synapse]: http://synapsesoftware.com\r\n[test_plugin]: https://github.com/bparks/pails-test-plugin\r\n[pails-plugins]: https://github.com/bparks/pails-plugins\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}